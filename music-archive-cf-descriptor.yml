AWSTemplateFormatVersion: '2010-09-09'
Description: Music Archive Stack
Parameters:
  Env:
    Type: String
  PublicURL:
    Type: String
  HostedZoneId:
    Type: String
  DNSCertARN:
    Type: String
  S3OriginAccessIdentity:
    Type: String
Conditions:
  CreateProdResources: !Equals [ !Ref Env, 'prod' ]
Resources:
  #S3 Dist Bucket
  MusicArchiveFeDistributionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join: [ '-', [ 'music-archive-fe-distribution', !Ref Env ] ]
      VersioningConfiguration:
        Status: Enabled
  MusicArchiveFeDistributionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MusicArchiveFeDistributionBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:GetObject'
            Resource:
              Fn::Join: [ '', [ !GetAtt MusicArchiveFeDistributionBucket.Arn, '/*' ] ]
          - Effect: Allow
            Principal:
              AWS:
                - Fn::Join: [ ' ', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref S3OriginAccessIdentity ] ]
            Action:
              - 's3:ListBucket'
            Resource: !GetAtt MusicArchiveFeDistributionBucket.Arn
  #S3 Music File Bucket
  MusicArchiveFileLibraryBucket:
    DependsOn: TagReaderFunction
    DependsOn: TagReaderLambdaPermission
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Join: [ '-', [ 'music-archive-file-library', !Ref Env ] ]
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     - Function: !GetAtt TagReaderFunction.Arn
      #       Event: 's3:ObjectCreated:*'
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: suffix
      #               Value: mp3
      #     - Function: !GetAtt TagReaderFunction.Arn
      #       Event: 's3:ObjectCreated:*'
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: suffix
      #               Value: m4a
  #CloudFront distro to sit in front of bucket and reduce outbound cost
  MusicArchiveDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment:
          Fn::Join: [ '', [ 'MusicArchive Distro [', !Ref Env, ']' ] ]
        Aliases:
        - !Ref PublicURL
        DefaultRootObject: index.html
        HttpVersion: http2
        ViewerCertificate:
          # AcmCertificateArn: !Ref DNSCertARN
          # Remove CloudFrontDefaultCertificate when DNSCert is usable
          CloudFrontDefaultCertificate: true
          # SslSupportMethod: sni-only
        Origins:
        - DomainName: !GetAtt MusicArchiveFeDistributionBucket.DomainName
          Id:
            Fn::Join: [ '-', [ 'origin', !GetAtt MusicArchiveFeDistributionBucket.DomainName ] ]
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Join: [ '', [ 'origin-access-identity/cloudfront/', !Ref S3OriginAccessIdentity ] ]
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Join: [ '-', [ 'origin', !GetAtt MusicArchiveFeDistributionBucket.DomainName ] ]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
          # ViewerProtocolPolicy: redirect-to-https
          ViewerProtocolPolicy: allow-all
  #DNS Record Set
  MusicArchiveDistributionDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref PublicURL
      Type: A
      AliasTarget:
        DNSName: !GetAtt MusicArchiveDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
  #Lambda Role Definitions
  TagReaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join: [ '-', [ 'tag-reader-role', !Ref Env ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  #Lambda Function Definitions
  TagReaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda/tag-reader.handler
      Runtime: nodejs6.10
      Code:
        S3Bucket: 'music-archive-source-code'
        S3Key: %{SourceCodeBucket}
      Role:
        Fn::GetAtt:
          - TagReaderRole
          - Arn
  TagReaderLambdaPermission:
    DependsOn: TagReaderFunction
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - TagReaderFunction
          - Arn
      SourceArn:
        Fn::Join: [ '', [ 'arn:aws:s3:::', 'music-archive-file-librar-', !Ref Env ] ]